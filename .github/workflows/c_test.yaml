name: C/C++ Build & Test

on:
  push:
  pull_request:

# default: semua job hanya bisa baca
permissions:
  contents: read

jobs:
  lint_format:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install tools
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install clang-tidy clang-format cmake wget

      - name: Get format scripts
        run: |
          wget https://raw.githubusercontent.com/bellshade/unitesting-script/main/filename_formatter.sh
          wget https://raw.githubusercontent.com/bellshade/unitesting-script/main/markdown_formatter.sh
          chmod +x filename_formatter.sh markdown_formatter.sh

      - name: Run filename & markdown formatters
        run: |
          ./filename_formatter.sh .c .h .cpp .hpp
          ./markdown_formatter.sh

      - name: Configure (generate compile_commands.json)
        run: cmake -B build -S . -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Run clang-tidy on changed files
        run: |
          set -e
          if git rev-parse --verify origin/main >/dev/null 2>&1; then
            BASE_SHA="$(git merge-base HEAD origin/main)"
          else
            BASE_SHA="$(git rev-list --max-parents=0 HEAD | tail -n1)"
          fi
          CHANGED="$(git diff --diff-filter=dr --name-only "$BASE_SHA"...HEAD | grep -E '\.(c|h|cpp|hpp)$' || true)"
          echo "Changed files:"
          echo "$CHANGED"
          if [ -n "$CHANGED" ]; then
            for f in $CHANGED; do
              echo "clang-tidy: $f"
              clang-tidy "$f" --quiet -- -I./src
            done
          else
            echo "No C/C++ files changed."
          fi

  build:
    name: Build & Test
    runs-on: ${{ matrix.os }}
    needs: [lint_format]

    # khusus job ini boleh tulis label di PR
    permissions:
      contents: read
      issues: write

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure
        run: cmake -B build -S .

      - name: Build
        run: cmake --build build --parallel 4

      - name: Run tests
        run: ctest --test-dir build --output-on-failure

      - name: Label PR when build/test failed (Ubuntu only)
        if: ${{ failure() && matrix.os == 'ubuntu-latest' && github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['testing fail!']
            })
